import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk, ImageEnhance
import cv2
import tensorflow_hub as hub
import tensorflow as tf
import numpy as np

def load_image():
    global img_path, img
    img_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg;*.jpeg;*.png")])
    if img_path:
        img = Image.open(img_path)
        img.thumbnail((400, 400))
        img_display = ImageTk.PhotoImage(img)
        panel.configure(image=img_display)
        panel.image = img_display
        messagebox.showinfo("Success", "Image loaded successfully!")

def save_image(img):
    save_path = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=[("JPEG", "*.jpg"), ("PNG", "*.png")])
    if save_path:
        img.save(save_path)
        messagebox.showinfo("Success", "Image saved successfully!")

def enhance_resolution():
    if not img_path:
        messagebox.showerror("Error", "Please load an image first!")
        return

    sr = cv2.dnn_superres.DnnSuperResImpl_create()
    sr.readModel("EDSR_x4.pb")
    sr.setModel("edsr", 4)

    img_cv = cv2.imread(img_path)
    result = sr.upsample(img_cv)
    result_img = Image.fromarray(cv2.cvtColor(result, cv2.COLOR_BGR2RGB))
    save_image(result_img)

def reduce_noise():
    if not img_path:
        messagebox.showerror("Error", "Please load an image first!")
        return

    img_cv = cv2.imread(img_path)
    result = cv2.fastNlMeansDenoisingColored(img_cv, None, 10, 10, 7, 21)
    result_img = Image.fromarray(cv2.cvtColor(result, cv2.COLOR_BGR2RGB))
    save_image(result_img)

def adjust_colors():
    if not img_path:
        messagebox.showerror("Error", "Please load an image first!")
        return

    enhanced_img = ImageEnhance.Brightness(img).enhance(1.2)
    enhanced_img = ImageEnhance.Contrast(enhanced_img).enhance(1.5)
    save_image(enhanced_img)

def apply_style():
    if not img_path:
        messagebox.showerror("Error", "Please load an image first!")
        return

    style_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg;*.jpeg;*.png")])
    if not style_path:
        return

    content_image = tf.image.decode_image(open(img_path, 'rb').read(), channels=3)
    content_image = tf.image.convert_image_dtype(content_image, tf.float32)[tf.newaxis, ...]

    style_image = tf.image.decode_image(open(style_path, 'rb').read(), channels=3)
    style_image = tf.image.convert_image_dtype(style_image, tf.float32)[tf.newaxis, ...]

    model = hub.load("https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2")
    stylized_image = model(content_image, style_image)[0]

    result_img = tf.keras.preprocessing.image.array_to_img(stylized_image[0])
    save_image(result_img)

# Tkinter UI
root = tk.Tk()
root.title("Photo Enhancer")

frame = tk.Frame(root)
frame.pack(pady=20)

panel = tk.Label(frame)
panel.pack()

btn_load = tk.Button(root, text="Load Image", command=load_image)
btn_load.pack(pady=5)

btn_res = tk.Button(root, text="Enhance Resolution", command=enhance_resolution)
btn_res.pack(pady=5)

btn_noise = tk.Button(root, text="Reduce Noise", command=reduce_noise)
btn_noise.pack(pady=5)

btn_color = tk.Button(root, text="Adjust Colors", command=adjust_colors)
btn_color.pack(pady=5)

btn_style = tk.Button(root, text="Apply Style Transfer", command=apply_style)
btn_style.pack(pady=5)

img_path = None
img = None

root.mainloop()
